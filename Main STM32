//Universidad del Valle de Guatemala
//Julio Pérez 221023
//Electrónica Digital 2
/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "fatfs_sd.h"
#include "string.h"
#include "stdio.h"
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
SPI_HandleTypeDef hspi1;
FATFS fs;
FATFS *pfs;
FIL fil;
FRESULT fres;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;
char buffer[100];
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart6;

/* USER CODE BEGIN PV */
uint8_t btnPressed = 0; // Variable para indicar si el botón fue presionado
uint8_t adcValue;  // Variable para almacenar el valor ADC
uint8_t uartRxBuffer[1]; // Buffer para recibir el valor ADC (2 bytes)
float voltage;
char voltageStr[20]; // Buffer para almacenar la cadena del voltaje
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_SPI1_Init(void);
void floatToString(float value, char *buffer, int precision);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Función callback para manejar las interrupciones del botón */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();

    if (current_time - last_interrupt_time > 50) { // 50 ms de debounce
        if (GPIO_Pin == BTN1_Pin) { // Asegúrate de que BTN1_Pin es el pin del botón
            btnPressed = 1; // Indicar que el botón fue presionado
        }
    }
    last_interrupt_time = current_time;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART6_UART_Init();
  MX_FATFS_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      if (btnPressed) {
          // Enviar solicitud para leer el potenciómetro
          uint8_t request = 1; // Solo hay un botón, por lo que siempre se envía 1
          HAL_UART_Transmit(&huart6, &request, sizeof(request), HAL_MAX_DELAY);

          // Esperar un breve tiempo antes de recibir el valor
          HAL_Delay(10); // Ajustar el delay según sea necesario

          // Leer el valor del potenciómetro a través de UART
          HAL_UART_Receive(&huart6, uartRxBuffer, sizeof(uartRxBuffer), HAL_MAX_DELAY);

          // Reconstruir el valor ADC desde el buffer
          adcValue = uartRxBuffer[0];

          float adcValuef = adcValue;

          // Convertir el valor ADC a voltaje
          voltage = (adcValuef/255.0)*5.0;

          // Convertir el voltaje a una cadena
          floatToString(3.03, voltageStr, 2); // 2 decimales

          // Guardar el voltaje en la tarjeta SD
         //Montar SD
         fres = f_mount(&fs, "/", 0);
         if (fres == FR_OK){
         		  transmit_uart("SD card is mounted sucessfully!\n");
         }
         else if (fres !=FR_OK){
         		  transmit_uart("SD cards's mount error!\n");
         }
         	  //Abrir archivo
        fres = f_open(&fil, "lab10.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
         if (fres == FR_OK){
         		  transmit_uart("File opened for reading and checking the free space.\n");
         }
         else if (fres !=FR_OK){
         		  transmit_uart("File was not opened for reading and checking the free space!\n");
         }



         	 // Convertir el voltaje a una cadena
         	 /*char voltageStr[20]; // Buffer para almacenar la cadena del voltaje
         	 voltageStr(voltageStr, voltageStr[20], 2); // Formatear el float

         	  // Escribir el voltaje en el archivo
            f_puts("Voltaje registrado: \n", &fil);
         	  f_puts(voltageStr, &fil);*/

         	  //Cerrar archivo
         	  fres = f_close(&fil);
         	  if (fres==FR_OK){
         		  transmit_uart("The file is closed.\n");
         	  }
         	  else if (fres !=FR_OK){
         		  transmit_uart("The file was not closed.\n");
         	  }
         	  //Abrir archivo para leer
         	  fres = f_open(&fil,"lab10.txt", FA_READ);
         	  if (fres == FR_OK){
         		  transmit_uart("File opened for reading.\n");
         	  }
         	  else if (fres !=FR_OK){
         		  //transmit_uart("File was not opened for reading.\n");
         	  }
         	  //Leer archivo
         	  while (f_gets(buffer, sizeof (buffer), &fil)){
         		  char mRd[100];
				  sprintf(mRd, "%s", buffer);
         		  transmit_uart(mRd);
         	  }*/
         	  //Cerrar archivo
         	  fres = f_close(&fil);
         	  if (fres==FR_OK){
         		  transmit_uart("The file is closed.\n");
         	  }
         	  else if (fres != FR_OK){
         		  transmit_uart("The file was not closed.\n");
         	  }
         	  //Desmontar unidad
         	  f_mount(NULL, "",1);
         	  if (fres==FR_OK){
         		  transmit_uart("The Micro SD card is unmounted!\n");
         	  }
         	  else if (fres !=FR_OK){
         		  transmit_uart("The Micro SD was not unmounted!\n");
         	  }

          btnPressed = 0; // Resetear el estado del botón
      }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void floatToString(float value, char *buffer, int precision) {
    int intPart = (int)value;
    float fracPart = value - intPart;

    // Convierte la parte entera
    int pos = 0;
    if (intPart < 0) {
        buffer[pos++] = '-';
        intPart = -intPart;
    }

    // Convierte la parte entera a cadena
    int intTemp = intPart;
    char intBuffer[10]; // Buffer temporal para la parte entera
    int intPos = 0;

    // Manejar el caso de 0
    if (intTemp == 0) {
        intBuffer[intPos++] = '0';
    } else {
        do {
            intBuffer[intPos++] = (intTemp % 10) + '0';
            intTemp /= 10;
        } while (intTemp > 0);
    }

    // Añadir la parte entera al buffer
    while (intPos > 0) {
        buffer[pos++] = intBuffer[--intPos];
    }

    // Añadir la parte fraccionaria
    if (precision > 0) {
        buffer[pos++] = '.';
        for (int i = 0; i < precision; i++) {
            fracPart *= 10;
            int fracInt = (int)fracPart;
            buffer[pos++] = fracInt + '0';
            fracPart -= fracInt;

            // Redondear si es necesario
            if (i == precision - 1 && fracPart >= 0.5) {
                buffer[pos - 1] += 1; // Sumar 1 a la última cifra
            }
        }
    }

    buffer[pos] = '\0'; // Terminar la cadena
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
